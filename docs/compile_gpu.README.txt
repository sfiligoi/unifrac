# How to compile a GPU-enabled version of unifrac
# On Linux

#
# Install https://repo.anaconda.com/archive/Anaconda3-2020.07-Linux-x86_64.sh
# And make surre it is in the path

#
# wget https://repo.anaconda.com/archive/Anaconda3-2020.07-Linux-x86_64.sh
# chmod a+x Anaconda3-2020.07-Linux-x86_64.sh
# ./Anaconda3-2020.07-Linux-x86_64.sh
# (log out and backin)

#
# We will use the unifrac-gpu environment
#

conda create --name unifrac-gpu -c conda-forge -c bioconda unifrac=0.20.1
conda activate unifrac-gpu
conda install -c conda-forge -c bioconda gxx_linux-64=7.5.0 
conda install -c conda-forge -c bioconda hdf5-static

#Create conda gcc links
mkdir conda_nv_bins
(cd conda_nv_bins && for f in \
  ar as c++ cc cpp g++ gcc ld nm ranlib strip; \
  do \
    ln -s $CONDA_PREFIX/bin/x86_64-conda_cos6-linux-gnu-${f} ${f}; \
  done )

mkdir setup_scripts
echo "conda activate unifrac-gpu " \
  > setup_scripts/setup_conda_nv_bins.sh
echo "PATH=${PWD}/conda_nv_bins:\$PATH" \
  >> setup_scripts/setup_conda_nv_bins.sh


# NVIDIA HPC compiler install (once, on a GPU-equipped system)
# ============================================================
# The official download site is 
#  https://developer.nvidia.com/nvidia-hpc-sdk-version-209-downloads

wget https://developer.download.nvidia.com/hpc-sdk/20.9/nvhpc_2020_209_Linux_x86_64_cuda_11.0.tar.gz
tar xpzf nvhpc_2020_209_Linux_x86_64_cuda_11.0.tar.gz
rm -f nvhpc_2020_209_Linux_x86_64_cuda_11.0.tar.gz

source setup_scripts/setup_conda_nv_bins.sh

# must patch the  install scripts to find the right gcc
sed -i -e "s#PATH=/#PATH=$PWD/conda_nv_bins:/#g" \
  nvhpc_*/install_components/install 
sed -i -e "s#PATH=/#PATH=$PWD/conda_nv_bins:/#g" \
  nvhpc_*/install_components/*/*/compilers/bin/makelocalrc
sed -i -e "s#PATH=/#PATH=$PWD/conda_nv_bins:/#g" \
  nvhpc_*/install_components/*/*/compilers/bin/addlocalrc
sed -i -e "s#PATH=/#PATH=$PWD/conda_nv_bins:/#g" \
  nvhpc_*/install_components/install_cuda

(cd nvhpc_*; ./install)
# Select "Single system install"
# Expand $PWD/hpc_sdk as install dir

echo "PATH=\$PATH:`ls -d $PWD/hpc_sdk/*/202*/compilers/bin`" \
  > setup_scripts/setup_nv_hpc_bins.sh

# h5c++ patch
mkdir conda_h5
cp $CONDA_PREFIX/bin/h5c++ conda_h5/

# This works on linux with gcc ..
sed -i \
  "s#x86_64-conda.*-linux-gnu-c++#pgc++ -I`ls -d $PWD/hpc_sdk/*/202*/compilers/include`#g" \
  conda_h5/h5c++ 
sed -i \
  's#H5BLD_CXXFLAGS=".*"#H5BLD_CXXFLAGS=" -fvisibility-inlines-hidden -std=c++17 -fPIC -O2 -I${includedir}"#g'  \
  conda_h5/h5c++
sed -i \
  's#H5BLD_CPPFLAGS=".*"#H5BLD_CPPFLAGS=" -I${includedir} -DNDEBUG -D_FORTIFY_SOURCE=2 -O2"#g' \
  conda_h5/h5c++
sed -i \
  's#H5BLD_LDFLAGS=".*"#H5BLD_LDFLAGS=" -L${prefix}/x86_64-conda-linux-gnu/sysroot/usr/lib64/ -L${libdir} -Wl,-O2 -Wl,--sort-common -Wl,--as-needed -Wl,-z,relro -Wl,-z,now -Wl,--disable-new-dtags -Wl,-rpath,\\\\\\$ORIGIN/../x86_64-conda-linux-gnu/sysroot/usr/lib64/ -Wl,-rpath,\\\\\\$ORIGIN/../lib -Wl,-rpath,${prefix}/x86_64-conda-linux-gnu/sysroot/usr/lib64/ -Wl,-rpath,${libdir}"#g' \
 conda_h5/h5c++

cat > setup_nv_h5.sh  << EOF
source $PWD/setup_scripts/setup_conda_nv_bins.sh
source $PWD/setup_scripts/setup_nv_hpc_bins.sh

PATH=${PWD}/conda_h5:\$PATH

# pgc++ does not define it, but gcc libraries expect it
export CPPFLAGS=-D__GCC_ATOMIC_TEST_AND_SET_TRUEVAL=0

EOF

#
# Now compile Unifrac
#

source setup_nv_h5.sh

curl -o unifrac_sec_0.20.1.tgz https://codeload.github.com/biocore/unifrac/tar.gz/0.20.1
tar -xfz unifrac_sec_0.20.1.tgz


# save CPU version of binaries
mv $CONDA_PREFIX/bin/ssu $CONDA_PREFIX/bin/ssu.cpu
mv $CONDA_PREFIX/bin/faithpd $CONDA_PREFIX/bin/faithpd.cpu
mv $CONDA_PREFIX/lib/libssu.so $CONDA_PREFIX/bin/libssu.so.cpu

(cd unifrac-0.20.1/sucpp/ && make && make main && make api)


